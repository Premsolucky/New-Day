import { handleRequest } from '@graphql-yoga/handler';
import { GraphQLScalarType, GraphQLSchema } from 'graphql';
import { Plugin, GetEnvelopedFn } from '@envelop/core';
import { Logger } from 'ts-log';
import { IResolvers, TypeSource } from '@graphql-tools/utils';
export declare type GraphQLServerCORSOptions = {
    origin: string[];
    methods?: string[];
    allowedHeaders?: string[];
    exposedHeaders?: string[];
    credentials?: boolean;
    maxAge?: number;
    optionsSuccessStatus?: number;
};
/**
 * Configuration options for the server
 */
export declare type BaseGraphQLServerOptions<TContext> = {
    /**
     * Envelop Plugins
     * @see https://envelop.dev/plugins
     */
    plugins?: Array<Plugin<TContext>>;
    /**
     * Detect server environment
     * Default: `false`
     */
    isDev?: boolean;
    /**
     * Context
     */
    context?: (req: Request) => Promise<TContext> | Promise<TContext>;
    cors?: ((request: Request) => GraphQLServerCORSOptions) | GraphQLServerCORSOptions | boolean;
} & ({
    schema: GraphQLSchema;
} | {
    typeDefs: TypeSource;
    resolvers?: IResolvers<any, TContext>;
});
/**
 * Base class that can be extended to create a GraphQL server with any HTTP server framework.
 */
export declare class BaseGraphQLServer<TContext> {
    /**
     * Request handler for helix
     */
    readonly handleRequest: typeof handleRequest;
    readonly schema: GraphQLSchema;
    /**
     * Instance of envelop
     */
    readonly getEnveloped: GetEnvelopedFn<TContext>;
    protected isDev: boolean;
    logger: Logger;
    readonly corsOptionsFactory?: (request: Request) => GraphQLServerCORSOptions;
    constructor(options: BaseGraphQLServerOptions<TContext>);
}
export declare const GraphQLBlob: GraphQLScalarType<unknown, unknown>;
export declare const GraphQLFile: GraphQLScalarType<unknown, unknown>;
