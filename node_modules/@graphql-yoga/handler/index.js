'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const graphqlHelix = require('@ardatan/graphql-helix');
const crossUndiciFetch = require('cross-undici-fetch');

function handleOptions(request, corsFactory) {
    const corsOptions = corsFactory(request);
    const headers = {};
    if (corsOptions.origin) {
        headers['Access-Control-Allow-Origin'] = corsOptions.origin.join(', ');
    }
    if (corsOptions.methods) {
        headers['Access-Control-Allow-Methods'] = corsOptions.methods.join(', ');
    }
    if (corsOptions.allowedHeaders) {
        headers['Access-Control-Allow-Headers'] =
            corsOptions.allowedHeaders.join(', ');
    }
    if (corsOptions.exposedHeaders) {
        headers['Access-Control-Expose-Headers'] =
            corsOptions.exposedHeaders.join(', ');
    }
    if (corsOptions.credentials) {
        headers['Access-Control-Allow-Credentials'] = 'true';
    }
    if (corsOptions.maxAge) {
        headers['Access-Control-Max-Age'] = corsOptions.maxAge.toString();
    }
    return new crossUndiciFetch.Response(null, {
        headers,
        status: corsOptions.optionsSuccessStatus,
    });
}
async function handleRequest(request) {
    try {
        if (this.corsOptionsFactory != null && request.method === 'OPTIONS') {
            return handleOptions(request, this.corsOptionsFactory);
        }
        if (graphqlHelix.shouldRenderGraphiQL(request)) {
            const graphiQLBody = graphqlHelix.renderGraphiQL();
            return new crossUndiciFetch.Response(graphiQLBody, {
                headers: {
                    'Content-Type': 'text/html',
                },
                status: 200,
            });
        }
        const graphqlParams = await graphqlHelix.getGraphQLParameters(request);
        if (this.getEnveloped) {
            const proxy = this.getEnveloped({ request });
            const processRequestOptions = {
                request,
                ...graphqlParams,
                ...proxy,
            };
            return graphqlHelix.processRequest(processRequestOptions);
        }
        return graphqlHelix.processRequest({
            request,
            schema: this.schema,
            ...graphqlParams,
        });
    }
    catch (err) {
        this.logger.error(err.message, err);
        const response = new crossUndiciFetch.Response(err.message, {
            status: 500,
            statusText: 'Internal Server Error',
        });
        return response;
    }
}

exports.handleOptions = handleOptions;
exports.handleRequest = handleRequest;
